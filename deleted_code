
import Card from "./card";
import React, { useState, useMemo, useRef } from "react";


const AuctionPhase = ({
  players,
  discardPile,
  setDiscardPile,
  setPhase,
  setPlayers,
  lastDonatorIndex,
  auctionStarterIndex,
}) => {
  console.log("Auction starting with player:", players[auctionStarterIndex]?.name);
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [currentBid, setCurrentBid] = useState(0);
  const [highestBidder, setHighestBidder] = useState(null);
  const [activePlayerIndex, setActivePlayerIndex] = useState(0);
  const [activeBidders, setActiveBidders] = useState(players.map(() => true));
  const bidInputRef = useRef(null);
  const [awaitingCardPayment, setAwaitingCardPayment] = useState(false);
  const [selectPaymentCards, setPaymentCards] = useState([]);
  const [goldWinner, setGoldWinner] = useState(null);
  const [goldCard, setGoldCard] = useState(null);
  const [auctionTurnOffset, setAuctionTurnOffset] = useState(
  (lastDonatorIndex + 1) % players.length
);


  const biddingOrder = useMemo(() => {
  return players.map((_, i) => players[(auctionTurnOffset + i) % players.length]);
}, [players, auctionTurnOffset]);

  const currentCard = discardPile[currentCardIndex];
  const isGold = currentCard?.type === "Gold";
  const player = biddingOrder[activePlayerIndex];

  const nextPlayer = () => {
    let next = (activePlayerIndex + 1) % players.length;

    // skip passed players
    while (!activeBidders[next]) {
      next = (next + 1) % players.length;
    }

    setActivePlayerIndex(next);
  };

  const handleBid = (amount) => {
  if (isGold && amount > player.hand.length) return;
  if (!isGold && amount > player.gold) return;
  if (amount <= currentBid) return alert("Bid too low!");

  setCurrentBid(amount);
  setHighestBidder(activePlayerIndex);

  const updatedHighestBidder = activePlayerIndex;
  const updated = [...activeBidders];
  updated[activePlayerIndex] = true; // Make sure bidder is still active

  const stillIn = updated.filter(Boolean).length;

  // ðŸŸ¢ If all others have passed â†’ auction ends
  if (stillIn === 1) {
    finishAuction(updated, updatedHighestBidder);
  } else {
    nextPlayer();
  }
};


  const handlePass = () => {
  const updated = [...activeBidders];
  updated[activePlayerIndex] = false;
  setActiveBidders(updated);

  const stillIn = updated.filter(Boolean).length;
  const hasBid = highestBidder !== null;

  if (stillIn === 0) {
    // All passed
    finishAuction(updated, hasBid ? highestBidder : null);
  } else if (stillIn === 1 && hasBid) {
    // Only one player remains AND someone has bid â†’ auction ends
    finishAuction(updated, highestBidder);
  } else {
    nextPlayer();
  }
};



  const finishAuction = (finalBidders, winnerIndex) => {
  if (winnerIndex == null) {
    alert("No one bid â€” card discarded.");
  } else {
    const updatedPlayers = [...players];
    const winnerName = biddingOrder[winnerIndex].name;
    const winnerIdx = players.findIndex((p) => p.name === winnerName);
    const winner = updatedPlayers[winnerIdx];

    if (isGold) {
      winner.gold += currentCard.value;
      // TODO: prompt for which cards to discard
      setAwaitingCardPayment(true);
      setGoldWinner({ player: winner, index: winnerIdx });
      setGoldCard(currentCard);

    } else {
      winner.gold -= currentBid;
      winner.hand.push(currentCard);
    }

    setPlayers(updatedPlayers);
  }

  // Advance to next card
  if (currentCardIndex + 1 < discardPile.length) {
    setCurrentCardIndex(currentCardIndex + 1);
    setCurrentBid(0);
    setHighestBidder(null);
    setActiveBidders(players.map(() => true));
    setAuctionTurnOffset((prev) => (prev + 1) % players.length);
    setActivePlayerIndex(0); // always start at index 0 of the new biddingOrder

  } else {
    setDiscardPile([]);
    setPhase("scoring");
  }
};


  if (!currentCard) return <p>No cards to auction.</p>;

  return (
    <div>
      <h3>Auction Phase</h3>
      <Card {...currentCard} />
      <p>
        Current Bid: {currentBid} by{" "}
        {highestBidder != null ? biddingOrder[highestBidder].name : "None"}
      </p>
      <p>Player: {player.name}</p>
      <p>Gold: {player.gold}, Cards: {player.hand.length}</p>

      <input
  type="number"
  min={currentBid + 1}
  placeholder="Enter bid"
  onKeyDown={(e) => {
    if (e.key === "Enter") {
      handleBid(Number(e.target.value));
      e.target.value = "";
    }
  }}
/>


      <button onClick={handlePass}>Pass</button>
    </div>
  );
};

export default AuctionPhase;

'''Second Update Part'''


import Card from "./card";
import React, { useState, useMemo, useRef } from "react";


const AuctionPhase = ({
  players,
  discardPile,
  setDiscardPile,
  setPhase,
  setPlayers,
  lastDonatorIndex,
  auctionStarterIndex,
}) => {
  console.log("Auction starting with player:", players[auctionStarterIndex]?.name);
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [currentBid, setCurrentBid] = useState(0);
  const [highestBidder, setHighestBidder] = useState(null);
  const [activePlayerIndex, setActivePlayerIndex] = useState(0);
  const [activeBidders, setActiveBidders] = useState(players.map(() => true));
  const bidInputRef = useRef(null);
  const [awaitingGoldPayment, setAwaitingGoldPayment] = useState(false);
  const [goldPaymentWinner, setGoldPaymentWinner] = useState(null);
  const [awaitingCardPayment, setAwaitingCardPayment] = useState(false);
  const [selectedPaymentCards, setSelectedPaymentCards] = useState([]);
  const [goldWinner, setGoldWinner] = useState(null);
  const [goldCard, setGoldCard] = useState(null);
  const [auctionTurnOffset, setAuctionTurnOffset] = useState(
  (lastDonatorIndex + 1) % players.length
);


  const biddingOrder = useMemo(() => {
  return players.map((_, i) => players[(auctionTurnOffset + i) % players.length]);
}, [players, auctionTurnOffset]);

  const currentCard = discardPile[currentCardIndex];
  const isGold = currentCard?.type === "Gold";
  const player = biddingOrder[activePlayerIndex];

  const nextPlayer = () => {
    let next = (activePlayerIndex + 1) % players.length;

    // skip passed players
    while (!activeBidders[next]) {
      next = (next + 1) % players.length;
    }

    setActivePlayerIndex(next);
  };

  const handleBid = (amount) => {
  if (isGold && amount > player.hand.length) return;
  if (!isGold && amount > player.gold) return;
  const isFirstBid = highestBidder === null;
if (!isFirstBid && amount <= currentBid) {
  return alert("Bid too low!");
}


  setCurrentBid(amount);
  setHighestBidder(activePlayerIndex);

  const updatedHighestBidder = activePlayerIndex;
  const updated = [...activeBidders];
  updated[activePlayerIndex] = true; // Make sure bidder is still active

  const stillIn = updated.filter(Boolean).length;

  // ðŸŸ¢ If all others have passed â†’ auction ends
  if (stillIn === 1) {
    finishAuction(updated, updatedHighestBidder);
  } else {
    nextPlayer();
  }
};


  const handlePass = () => {
  const updated = [...activeBidders];
  updated[activePlayerIndex] = false;
  setActiveBidders(updated);

  const stillIn = updated.filter(Boolean).length;
  const hasBid = highestBidder !== null;

  if (stillIn === 0) {
    // All passed
    finishAuction(updated, hasBid ? highestBidder : null);
  } else if (stillIn === 1 && hasBid) {
    // Only one player remains AND someone has bid â†’ auction ends
    finishAuction(updated, highestBidder);
  } else {
    nextPlayer();
  }
};



  const finishAuction = (finalBidders, winnerIndex) => {
  if (winnerIndex == null) {
    alert("No one bid â€” card discarded.");
  } else {
    const updatedPlayers = [...players];
    const winnerName = biddingOrder[winnerIndex].name;
    const winnerIdx = players.findIndex((p) => p.name === winnerName);
    const winner = updatedPlayers[winnerIdx];

    if (isGold) {
      winner.gold += currentCard.value;
      // TODO: prompt for which cards to discard
      setAwaitingCardPayment(true);
      setGoldWinner({ player: winner, index: winnerIdx });
      setGoldCard(currentCard);

    } else {
      setAwaitingGoldPayment(true);
setGoldPaymentWinner({ player: winner, index: winnerIdx, card: currentCard });
return; // Wait until payment is confirmed

    }

    setPlayers(updatedPlayers);
  }

  // Advance to next card
  if (currentCardIndex + 1 < discardPile.length) {
    setCurrentCardIndex(currentCardIndex + 1);
    // setCurrentBid(0);
    setHighestBidder(null);
    setActiveBidders(players.map(() => true));
    setAuctionTurnOffset((prev) => (prev + 1) % players.length);
    setActivePlayerIndex(0); // always start at index 0 of the new biddingOrder

    // âœ… Safely reset bid ONLY if we're not awaiting a gold card payment
  if (!isGold) {
    setCurrentBid(0);
  } 
  } else {
    setDiscardPile([]);
    setPhase("scoring");
  }
};


  if (!currentCard) return <p>No cards to auction.</p>;

if (awaitingCardPayment && goldWinner) {
  const winnerHand = players[goldWinner.index].hand;

  const toggleCardSelection = (card, idx) => {
    setSelectedPaymentCards(prev => {
      const alreadySelected = prev.find(c => c.idx === idx);
      if (alreadySelected) {
        return prev.filter(c => c.idx !== idx);
      } else {
        return [...prev, { ...card, idx }];
      }
    });
  };

  const confirmCardPayment = () => {
    if (selectedPaymentCards.length !== currentBid) {
      alert(`You must select exactly ${currentBid} cards.`);
      return;
    }

    const updatedPlayers = [...players];
    const hand = [...updatedPlayers[goldWinner.index].hand];
    const filtered = hand.filter((_, i) =>
      !selectedPaymentCards.some(c => c.idx === i)
    );
    updatedPlayers[goldWinner.index].hand = filtered;

    setPlayers(updatedPlayers);
    setAwaitingCardPayment(false);
    setSelectedPaymentCards([]);
    setCurrentBid(0)
  };

  return (
    <div>
      <h3>{goldWinner.player.name}, select {currentBid} cards to discard:</h3>
      <div style={{ display: "flex", flexWrap: "wrap" }}>
        {goldWinner.player.hand.map((card, idx) => (
          <div
            key={idx}
            onClick={() => toggleCardSelection(card, idx)}
            style={{
              border: selectedPaymentCards.some(c => c.idx === idx)
                ? "2px solid red"
                : "1px solid gray",
              margin: "5px",
              cursor: "pointer"
            }}
          >
            <Card {...card} />
          </div>
        ))}
      </div>
      <button onClick={confirmCardPayment}>Confirm Discard</button>
    </div>
  );
}


  return (
    <div>
      <h3>Auction Phase</h3>
      <Card {...currentCard} />
      <p>
        Current Bid: {currentBid} by{" "}
        {highestBidder != null ? biddingOrder[highestBidder].name : "None"}
      </p>
      <p>Player: {player.name}</p>
      <p>Gold: {player.gold}, Cards: {player.hand.length}</p>

      <input
  type="number"
  min={0}

  placeholder="Enter bid"
  onKeyDown={(e) => {
    if (e.key === "Enter") {
      handleBid(Number(e.target.value));
      e.target.value = "";
    }
  }}
/>


      <button onClick={handlePass}>Pass</button>
    </div>
  );
};

export default AuctionPhase;


